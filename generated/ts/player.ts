/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: player.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export namespace player {
    export enum MoveControlType {
        MOVE_CONTROL_UNKNOWN = 0,
        MOVE_CONTROL_FORWARD = 1,
        MOVE_CONTROL_BACKWARD = 2,
        MOVE_CONTROL_FORWARD_LEFT = 3,
        MOVE_CONTROL_FORWARD_RIGHT = 4,
        MOVE_CONTROL_BACKWARD_LEFT = 5,
        MOVE_CONTROL_BACKWARD_RIGHT = 6,
        MOVE_CONTROL_TURN_LEFT = 7,
        MOVE_CONTROL_TURN_RIGHT = 8
    }
    export class JoinRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            name?: string;
            location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            name?: string;
            location?: string;
        }): JoinRequest {
            const message = new JoinRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                name?: string;
                location?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.location.length)
                writer.writeString(3, this.location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinRequest {
            return JoinRequest.deserialize(bytes);
        }
    }
    export class JoinResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assigned_id?: number;
            assigned_role?: dependency_1.PlayerRole;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assigned_id" in data && data.assigned_id != undefined) {
                    this.assigned_id = data.assigned_id;
                }
                if ("assigned_role" in data && data.assigned_role != undefined) {
                    this.assigned_role = data.assigned_role;
                }
            }
        }
        get assigned_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set assigned_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get assigned_role() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.PlayerRole.PLAYER_ROLE_UNKNOWN) as dependency_1.PlayerRole;
        }
        set assigned_role(value: dependency_1.PlayerRole) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            assigned_id?: number;
            assigned_role?: dependency_1.PlayerRole;
        }): JoinResponse {
            const message = new JoinResponse({});
            if (data.assigned_id != null) {
                message.assigned_id = data.assigned_id;
            }
            if (data.assigned_role != null) {
                message.assigned_role = data.assigned_role;
            }
            return message;
        }
        toObject() {
            const data: {
                assigned_id?: number;
                assigned_role?: dependency_1.PlayerRole;
            } = {};
            if (this.assigned_id != null) {
                data.assigned_id = this.assigned_id;
            }
            if (this.assigned_role != null) {
                data.assigned_role = this.assigned_role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assigned_id != 0)
                writer.writeUint32(1, this.assigned_id);
            if (this.assigned_role != dependency_1.PlayerRole.PLAYER_ROLE_UNKNOWN)
                writer.writeEnum(2, this.assigned_role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assigned_id = reader.readUint32();
                        break;
                    case 2:
                        message.assigned_role = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinResponse {
            return JoinResponse.deserialize(bytes);
        }
    }
    export class JoinBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_1.Player;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 1) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            timestamp?: number;
        }): JoinBroadcast {
            const message = new JoinBroadcast({});
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
                timestamp?: number;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinBroadcast {
            return JoinBroadcast.deserialize(bytes);
        }
    }
    export class LeaveBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: string;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            player_id?: string;
            timestamp?: number;
        }): LeaveBroadcast {
            const message = new LeaveBroadcast({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: string;
                timestamp?: number;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id.length)
                writer.writeString(1, this.player_id);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveBroadcast {
            return LeaveBroadcast.deserialize(bytes);
        }
    }
    export class ListPlayerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: dependency_1.PlayerRole;
            name?: string;
            location?: string;
            page?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.PlayerRole.PLAYER_ROLE_UNKNOWN) as dependency_1.PlayerRole;
        }
        set role(value: dependency_1.PlayerRole) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            role?: dependency_1.PlayerRole;
            name?: string;
            location?: string;
            page?: number;
            limit?: number;
        }): ListPlayerRequest {
            const message = new ListPlayerRequest({});
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                role?: dependency_1.PlayerRole;
                name?: string;
                location?: string;
                page?: number;
                limit?: number;
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role != dependency_1.PlayerRole.PLAYER_ROLE_UNKNOWN)
                writer.writeEnum(1, this.role);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.location.length)
                writer.writeString(3, this.location);
            if (this.page != 0)
                writer.writeUint32(4, this.page);
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readEnum();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.location = reader.readString();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPlayerRequest {
            return ListPlayerRequest.deserialize(bytes);
        }
    }
    export class ListPlayerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            players?: dependency_1.Player[];
            total?: number;
            page?: number;
            limit?: number;
            next_page?: number;
            prev_page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("players" in data && data.players != undefined) {
                    this.players = data.players;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("next_page" in data && data.next_page != undefined) {
                    this.next_page = data.next_page;
                }
                if ("prev_page" in data && data.prev_page != undefined) {
                    this.prev_page = data.prev_page;
                }
            }
        }
        get players() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Player, 1) as dependency_1.Player[];
        }
        set players(value: dependency_1.Player[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get next_page() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set next_page(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get prev_page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set prev_page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            players?: ReturnType<typeof dependency_1.Player.prototype.toObject>[];
            total?: number;
            page?: number;
            limit?: number;
            next_page?: number;
            prev_page?: number;
        }): ListPlayerResponse {
            const message = new ListPlayerResponse({});
            if (data.players != null) {
                message.players = data.players.map(item => dependency_1.Player.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.next_page != null) {
                message.next_page = data.next_page;
            }
            if (data.prev_page != null) {
                message.prev_page = data.prev_page;
            }
            return message;
        }
        toObject() {
            const data: {
                players?: ReturnType<typeof dependency_1.Player.prototype.toObject>[];
                total?: number;
                page?: number;
                limit?: number;
                next_page?: number;
                prev_page?: number;
            } = {};
            if (this.players != null) {
                data.players = this.players.map((item: dependency_1.Player) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.next_page != null) {
                data.next_page = this.next_page;
            }
            if (this.prev_page != null) {
                data.prev_page = this.prev_page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.players.length)
                writer.writeRepeatedMessage(1, this.players, (item: dependency_1.Player) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(2, this.total);
            if (this.page != 0)
                writer.writeUint32(3, this.page);
            if (this.limit != 0)
                writer.writeUint32(4, this.limit);
            if (this.next_page != 0)
                writer.writeUint32(5, this.next_page);
            if (this.prev_page != 0)
                writer.writeUint32(6, this.prev_page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Player.deserialize(reader), dependency_1.Player));
                        break;
                    case 2:
                        message.total = reader.readUint32();
                        break;
                    case 3:
                        message.page = reader.readUint32();
                        break;
                    case 4:
                        message.limit = reader.readUint32();
                        break;
                    case 5:
                        message.next_page = reader.readUint32();
                        break;
                    case 6:
                        message.prev_page = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPlayerResponse {
            return ListPlayerResponse.deserialize(bytes);
        }
    }
    export class ChatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): ChatRequest {
            const message = new ChatRequest({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatRequest {
            return ChatRequest.deserialize(bytes);
        }
    }
    export class ChatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error?: dependency_1.ErrorCode;
        }): ChatResponse {
            const message = new ChatResponse({});
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(1, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatResponse {
            return ChatResponse.deserialize(bytes);
        }
    }
    export class ChatBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: string;
            message?: string;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            player_id?: string;
            message?: string;
            timestamp?: number;
        }): ChatBroadcast {
            const message = new ChatBroadcast({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: string;
                message?: string;
                timestamp?: number;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id.length)
                writer.writeString(1, this.player_id);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.timestamp != 0)
                writer.writeUint64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatBroadcast {
            return ChatBroadcast.deserialize(bytes);
        }
    }
    export class ListVehiclesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: dependency_1.VehicleType;
            name?: string;
            location?: string;
            tag?: string;
            acquired?: boolean;
            page?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("acquired" in data && data.acquired != undefined) {
                    this.acquired = data.acquired;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.VehicleType.VEHICLE_UNKNOWN) as dependency_1.VehicleType;
        }
        set type(value: dependency_1.VehicleType) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get acquired() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set acquired(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            type?: dependency_1.VehicleType;
            name?: string;
            location?: string;
            tag?: string;
            acquired?: boolean;
            page?: number;
            limit?: number;
        }): ListVehiclesRequest {
            const message = new ListVehiclesRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.acquired != null) {
                message.acquired = data.acquired;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: dependency_1.VehicleType;
                name?: string;
                location?: string;
                tag?: string;
                acquired?: boolean;
                page?: number;
                limit?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.acquired != null) {
                data.acquired = this.acquired;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != dependency_1.VehicleType.VEHICLE_UNKNOWN)
                writer.writeEnum(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.location.length)
                writer.writeString(3, this.location);
            if (this.tag.length)
                writer.writeString(4, this.tag);
            if (this.acquired != false)
                writer.writeBool(5, this.acquired);
            if (this.page != 0)
                writer.writeUint32(6, this.page);
            if (this.limit != 0)
                writer.writeUint32(7, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVehiclesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVehiclesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.location = reader.readString();
                        break;
                    case 4:
                        message.tag = reader.readString();
                        break;
                    case 5:
                        message.acquired = reader.readBool();
                        break;
                    case 6:
                        message.page = reader.readUint32();
                        break;
                    case 7:
                        message.limit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVehiclesRequest {
            return ListVehiclesRequest.deserialize(bytes);
        }
    }
    export class ListVehiclesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicles?: dependency_1.Vehicle[];
            total?: number;
            page?: number;
            limit?: number;
            next_page?: number;
            prev_page?: number;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicles" in data && data.vehicles != undefined) {
                    this.vehicles = data.vehicles;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("next_page" in data && data.next_page != undefined) {
                    this.next_page = data.next_page;
                }
                if ("prev_page" in data && data.prev_page != undefined) {
                    this.prev_page = data.prev_page;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get vehicles() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Vehicle, 1) as dependency_1.Vehicle[];
        }
        set vehicles(value: dependency_1.Vehicle[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get next_page() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set next_page(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get prev_page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set prev_page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            vehicles?: ReturnType<typeof dependency_1.Vehicle.prototype.toObject>[];
            total?: number;
            page?: number;
            limit?: number;
            next_page?: number;
            prev_page?: number;
            error?: dependency_1.ErrorCode;
        }): ListVehiclesResponse {
            const message = new ListVehiclesResponse({});
            if (data.vehicles != null) {
                message.vehicles = data.vehicles.map(item => dependency_1.Vehicle.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.next_page != null) {
                message.next_page = data.next_page;
            }
            if (data.prev_page != null) {
                message.prev_page = data.prev_page;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicles?: ReturnType<typeof dependency_1.Vehicle.prototype.toObject>[];
                total?: number;
                page?: number;
                limit?: number;
                next_page?: number;
                prev_page?: number;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.vehicles != null) {
                data.vehicles = this.vehicles.map((item: dependency_1.Vehicle) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.next_page != null) {
                data.next_page = this.next_page;
            }
            if (this.prev_page != null) {
                data.prev_page = this.prev_page;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicles.length)
                writer.writeRepeatedMessage(1, this.vehicles, (item: dependency_1.Vehicle) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(2, this.total);
            if (this.page != 0)
                writer.writeUint32(3, this.page);
            if (this.limit != 0)
                writer.writeUint32(4, this.limit);
            if (this.next_page != 0)
                writer.writeUint32(5, this.next_page);
            if (this.prev_page != 0)
                writer.writeUint32(6, this.prev_page);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(7, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVehiclesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVehiclesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vehicles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Vehicle.deserialize(reader), dependency_1.Vehicle));
                        break;
                    case 2:
                        message.total = reader.readUint32();
                        break;
                    case 3:
                        message.page = reader.readUint32();
                        break;
                    case 4:
                        message.limit = reader.readUint32();
                        break;
                    case 5:
                        message.next_page = reader.readUint32();
                        break;
                    case 6:
                        message.prev_page = reader.readUint32();
                        break;
                    case 7:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVehiclesResponse {
            return ListVehiclesResponse.deserialize(bytes);
        }
    }
    export class VehicleConnectedBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle?: dependency_1.Vehicle;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle" in data && data.vehicle != undefined) {
                    this.vehicle = data.vehicle;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get vehicle() {
            return pb_1.Message.getWrapperField(this, dependency_1.Vehicle, 1) as dependency_1.Vehicle;
        }
        set vehicle(value: dependency_1.Vehicle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_vehicle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            vehicle?: ReturnType<typeof dependency_1.Vehicle.prototype.toObject>;
            timestamp?: number;
        }): VehicleConnectedBroadcast {
            const message = new VehicleConnectedBroadcast({});
            if (data.vehicle != null) {
                message.vehicle = dependency_1.Vehicle.fromObject(data.vehicle);
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle?: ReturnType<typeof dependency_1.Vehicle.prototype.toObject>;
                timestamp?: number;
            } = {};
            if (this.vehicle != null) {
                data.vehicle = this.vehicle.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_vehicle)
                writer.writeMessage(1, this.vehicle, () => this.vehicle.serialize(writer));
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleConnectedBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehicleConnectedBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.vehicle, () => message.vehicle = dependency_1.Vehicle.deserialize(reader));
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehicleConnectedBroadcast {
            return VehicleConnectedBroadcast.deserialize(bytes);
        }
    }
    export class VehicleDisconnectedBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
            timestamp?: number;
        }): VehicleDisconnectedBroadcast {
            const message = new VehicleDisconnectedBroadcast({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                timestamp?: number;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleDisconnectedBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehicleDisconnectedBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehicleDisconnectedBroadcast {
            return VehicleDisconnectedBroadcast.deserialize(bytes);
        }
    }
    export class AcquireRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
        }): AcquireRequest {
            const message = new AcquireRequest({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcquireRequest {
            return AcquireRequest.deserialize(bytes);
        }
    }
    export class AcquireResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            success?: boolean;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
            success?: boolean;
            error?: dependency_1.ErrorCode;
        }): AcquireResponse {
            const message = new AcquireResponse({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                success?: boolean;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcquireResponse {
            return AcquireResponse.deserialize(bytes);
        }
    }
    export class AcquireBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            player?: dependency_1.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 2) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            vehicle_id?: string;
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
        }): AcquireBroadcast {
            const message = new AcquireBroadcast({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.has_player)
                writer.writeMessage(2, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcquireBroadcast {
            return AcquireBroadcast.deserialize(bytes);
        }
    }
    export class MoveControlRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            type?: MoveControlType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, MoveControlType.MOVE_CONTROL_UNKNOWN) as MoveControlType;
        }
        set type(value: MoveControlType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
            type?: MoveControlType;
        }): MoveControlRequest {
            const message = new MoveControlRequest({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                type?: MoveControlType;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.type != MoveControlType.MOVE_CONTROL_UNKNOWN)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveControlRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveControlRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveControlRequest {
            return MoveControlRequest.deserialize(bytes);
        }
    }
    export class MoveControlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            motors?: dependency_1.MotorStateMessage[];
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("motors" in data && data.motors != undefined) {
                    this.motors = data.motors;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get motors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MotorStateMessage, 1) as dependency_1.MotorStateMessage[];
        }
        set motors(value: dependency_1.MotorStateMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
            error?: dependency_1.ErrorCode;
        }): MoveControlResponse {
            const message = new MoveControlResponse({});
            if (data.motors != null) {
                message.motors = data.motors.map(item => dependency_1.MotorStateMessage.fromObject(item));
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.motors != null) {
                data.motors = this.motors.map((item: dependency_1.MotorStateMessage) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.motors.length)
                writer.writeRepeatedMessage(1, this.motors, (item: dependency_1.MotorStateMessage) => item.serialize(writer));
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveControlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveControlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.motors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.MotorStateMessage.deserialize(reader), dependency_1.MotorStateMessage));
                        break;
                    case 2:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveControlResponse {
            return MoveControlResponse.deserialize(bytes);
        }
    }
    export class VehicleCameraBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            timestamp?: number;
            frame?: dependency_1.CameraFrame;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get frame() {
            return pb_1.Message.getWrapperField(this, dependency_1.CameraFrame, 3) as dependency_1.CameraFrame;
        }
        set frame(value: dependency_1.CameraFrame) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            vehicle_id?: string;
            timestamp?: number;
            frame?: ReturnType<typeof dependency_1.CameraFrame.prototype.toObject>;
        }): VehicleCameraBroadcast {
            const message = new VehicleCameraBroadcast({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.frame != null) {
                message.frame = dependency_1.CameraFrame.fromObject(data.frame);
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                timestamp?: number;
                frame?: ReturnType<typeof dependency_1.CameraFrame.prototype.toObject>;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.frame != null) {
                data.frame = this.frame.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (this.has_frame)
                writer.writeMessage(3, this.frame, () => this.frame.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleCameraBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehicleCameraBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.frame, () => message.frame = dependency_1.CameraFrame.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehicleCameraBroadcast {
            return VehicleCameraBroadcast.deserialize(bytes);
        }
    }
    export class VehicleStateBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            timestamp?: number;
            sensors?: dependency_1.SensorReading[];
            motors?: dependency_1.MotorStateMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("sensors" in data && data.sensors != undefined) {
                    this.sensors = data.sensors;
                }
                if ("motors" in data && data.motors != undefined) {
                    this.motors = data.motors;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sensors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SensorReading, 3) as dependency_1.SensorReading[];
        }
        set sensors(value: dependency_1.SensorReading[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get motors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MotorStateMessage, 4) as dependency_1.MotorStateMessage[];
        }
        set motors(value: dependency_1.MotorStateMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
            timestamp?: number;
            sensors?: ReturnType<typeof dependency_1.SensorReading.prototype.toObject>[];
            motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
        }): VehicleStateBroadcast {
            const message = new VehicleStateBroadcast({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.sensors != null) {
                message.sensors = data.sensors.map(item => dependency_1.SensorReading.fromObject(item));
            }
            if (data.motors != null) {
                message.motors = data.motors.map(item => dependency_1.MotorStateMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                timestamp?: number;
                sensors?: ReturnType<typeof dependency_1.SensorReading.prototype.toObject>[];
                motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.sensors != null) {
                data.sensors = this.sensors.map((item: dependency_1.SensorReading) => item.toObject());
            }
            if (this.motors != null) {
                data.motors = this.motors.map((item: dependency_1.MotorStateMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (this.sensors.length)
                writer.writeRepeatedMessage(3, this.sensors, (item: dependency_1.SensorReading) => item.serialize(writer));
            if (this.motors.length)
                writer.writeRepeatedMessage(4, this.motors, (item: dependency_1.MotorStateMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VehicleStateBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VehicleStateBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.sensors, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.SensorReading.deserialize(reader), dependency_1.SensorReading));
                        break;
                    case 4:
                        reader.readMessage(message.motors, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.MotorStateMessage.deserialize(reader), dependency_1.MotorStateMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VehicleStateBroadcast {
            return VehicleStateBroadcast.deserialize(bytes);
        }
    }
    export class ReleaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
        }): ReleaseRequest {
            const message = new ReleaseRequest({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReleaseRequest {
            return ReleaseRequest.deserialize(bytes);
        }
    }
    export class ReleaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            vehicle_id?: string;
            error?: dependency_1.ErrorCode;
        }): ReleaseResponse {
            const message = new ReleaseResponse({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReleaseResponse {
            return ReleaseResponse.deserialize(bytes);
        }
    }
    export class ReleaseBroadcast extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vehicle_id?: string;
            player?: dependency_1.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vehicle_id" in data && data.vehicle_id != undefined) {
                    this.vehicle_id = data.vehicle_id;
                }
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get vehicle_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vehicle_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 2) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            vehicle_id?: string;
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
        }): ReleaseBroadcast {
            const message = new ReleaseBroadcast({});
            if (data.vehicle_id != null) {
                message.vehicle_id = data.vehicle_id;
            }
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                vehicle_id?: string;
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            } = {};
            if (this.vehicle_id != null) {
                data.vehicle_id = this.vehicle_id;
            }
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vehicle_id.length)
                writer.writeString(1, this.vehicle_id);
            if (this.has_player)
                writer.writeMessage(2, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vehicle_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReleaseBroadcast {
            return ReleaseBroadcast.deserialize(bytes);
        }
    }
}
