/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum ErrorCode {
    ERROR_OK = 0,
    ERROR_INTERNAL = 1,
    ERROR_TIMEOUT = 2,
    ERROR_NOT_FOUND = 3,
    ERROR_DENIED = 4,
    ERROR_TEMPORARY = 5,
    ERROR_LOST = 6,
    ERROR_TOO_LONG = 7,
    ERROR_INVALID_TOKEN = 8,
    ERROR_INVALID_REQUEST = 9,
    ERROR_INVALIG_ARGS = 10,
    ERROR_ACQUIRE_LIMIT = 11,
    ERROR_NO_CAPABILITY = 12,
    ERROR_MOTOR_HALTED = 13
}
export enum PlayerRole {
    PLAYER_ROLE_UNKNOWN = 0,
    PLAYER_ROLE_ADMIN = 1,
    PLAYER_ROLE_USER = 2
}
export enum VehicleType {
    VEHICLE_UNKNOWN = 0,
    VEHICLE_ORE0 = 1
}
export enum SensorType {
    SENSOR_UNKNOWN = 0,
    SENSOR_BATTERY = 1,
    SENSOR_DISTANCE = 2,
    SENSOR_CONTACT = 3,
    SENSOR_POSITION = 4
}
export enum SensorDistanceType {
    SENSOR_DISTANCE_UNKNOWN = 0,
    SENSOR_DISTANCE_FRONT = 1,
    SENSOR_DISTANCE_BACK = 2
}
export enum SensorContactType {
    SENSOR_CONTACT_UNKNOWN = 0,
    SENSOR_CONTACT_FRONT_LEFT = 1,
    SENSOR_CONTACT_FRONT_RIGHT = 2,
    SENSOR_CONTACT_BACK_LEFT = 3,
    SENSOR_CONTACT_BACK_RIGHT = 4
}
export enum CameraFrameType {
    CAMERA_FRAME_UNKNOWN = 0,
    CAMERA_FRAME_RAW = 1,
    CAMERA_FRAME_JPEG = 2
}
export enum MotorType {
    MOTOR_UNKNOWN = 0,
    MOTOR_LEFT = 1,
    MOTOR_RIGHT = 2
}
export enum MotorDirection {
    MOTOR_DIRECTION_UNKNOWN = 0,
    MOTOR_DIRECTION_IDLE = 1,
    MOTOR_DIRECTION_FORWARD = 2,
    MOTOR_DIRECTION_BACKWARD = 3,
    MOTOR_DIRECTION_BRAKE = 4
}
export class Player extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        role?: PlayerRole;
        name?: string;
        location?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 2, PlayerRole.PLAYER_ROLE_UNKNOWN) as PlayerRole;
    }
    set role(value: PlayerRole) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        role?: PlayerRole;
        name?: string;
        location?: string;
    }): Player {
        const message = new Player({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            role?: PlayerRole;
            name?: string;
            location?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.role != PlayerRole.PLAYER_ROLE_UNKNOWN)
            writer.writeEnum(2, this.role);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.location.length)
            writer.writeString(4, this.location);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.role = reader.readEnum();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.location = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Player {
        return Player.deserialize(bytes);
    }
}
export class Vehicle extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        type?: VehicleType;
        name?: string;
        location?: string;
        tag?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, VehicleType.VEHICLE_UNKNOWN) as VehicleType;
    }
    set type(value: VehicleType) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get tag() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set tag(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        type?: VehicleType;
        name?: string;
        location?: string;
        tag?: string;
    }): Vehicle {
        const message = new Vehicle({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        if (data.tag != null) {
            message.tag = data.tag;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            type?: VehicleType;
            name?: string;
            location?: string;
            tag?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        if (this.tag != null) {
            data.tag = this.tag;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.type != VehicleType.VEHICLE_UNKNOWN)
            writer.writeEnum(2, this.type);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.location.length)
            writer.writeString(4, this.location);
        if (this.tag.length)
            writer.writeString(5, this.tag);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vehicle {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vehicle();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.type = reader.readEnum();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.location = reader.readString();
                    break;
                case 5:
                    message.tag = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Vehicle {
        return Vehicle.deserialize(bytes);
    }
}
export class SensorBatteryReading extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: number;
        est_remaining_sec?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("est_remaining_sec" in data && data.est_remaining_sec != undefined) {
                this.est_remaining_sec = data.est_remaining_sec;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set value(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get est_remaining_sec() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set est_remaining_sec(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        value?: number;
        est_remaining_sec?: number;
    }): SensorBatteryReading {
        const message = new SensorBatteryReading({});
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.est_remaining_sec != null) {
            message.est_remaining_sec = data.est_remaining_sec;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: number;
            est_remaining_sec?: number;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.est_remaining_sec != null) {
            data.est_remaining_sec = this.est_remaining_sec;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value != 0)
            writer.writeUint32(1, this.value);
        if (this.est_remaining_sec != 0)
            writer.writeUint32(2, this.est_remaining_sec);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorBatteryReading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorBatteryReading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readUint32();
                    break;
                case 2:
                    message.est_remaining_sec = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SensorBatteryReading {
        return SensorBatteryReading.deserialize(bytes);
    }
}
export class SensorDistanceReading extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: SensorDistanceType;
        value?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, SensorDistanceType.SENSOR_DISTANCE_UNKNOWN) as SensorDistanceType;
    }
    set type(value: SensorDistanceType) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set value(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: SensorDistanceType;
        value?: number;
    }): SensorDistanceReading {
        const message = new SensorDistanceReading({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: SensorDistanceType;
            value?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != SensorDistanceType.SENSOR_DISTANCE_UNKNOWN)
            writer.writeEnum(1, this.type);
        if (this.value != 0)
            writer.writeUint32(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorDistanceReading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorDistanceReading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.value = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SensorDistanceReading {
        return SensorDistanceReading.deserialize(bytes);
    }
}
export class SensorContactReading extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: SensorContactType;
        value?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, SensorContactType.SENSOR_CONTACT_UNKNOWN) as SensorContactType;
    }
    set type(value: SensorContactType) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set value(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: SensorContactType;
        value?: boolean;
    }): SensorContactReading {
        const message = new SensorContactReading({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: SensorContactType;
            value?: boolean;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != SensorContactType.SENSOR_CONTACT_UNKNOWN)
            writer.writeEnum(1, this.type);
        if (this.value != false)
            writer.writeBool(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorContactReading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorContactReading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.value = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SensorContactReading {
        return SensorContactReading.deserialize(bytes);
    }
}
export class SensorPositionReading extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        latitude?: number;
        longitude?: number;
        altitude?: number;
        accuracy?: number;
        speed?: number;
        bearing?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("latitude" in data && data.latitude != undefined) {
                this.latitude = data.latitude;
            }
            if ("longitude" in data && data.longitude != undefined) {
                this.longitude = data.longitude;
            }
            if ("altitude" in data && data.altitude != undefined) {
                this.altitude = data.altitude;
            }
            if ("accuracy" in data && data.accuracy != undefined) {
                this.accuracy = data.accuracy;
            }
            if ("speed" in data && data.speed != undefined) {
                this.speed = data.speed;
            }
            if ("bearing" in data && data.bearing != undefined) {
                this.bearing = data.bearing;
            }
        }
    }
    get latitude() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set latitude(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get longitude() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set longitude(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get altitude() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set altitude(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get accuracy() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set accuracy(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get speed() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set speed(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get bearing() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set bearing(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        latitude?: number;
        longitude?: number;
        altitude?: number;
        accuracy?: number;
        speed?: number;
        bearing?: number;
    }): SensorPositionReading {
        const message = new SensorPositionReading({});
        if (data.latitude != null) {
            message.latitude = data.latitude;
        }
        if (data.longitude != null) {
            message.longitude = data.longitude;
        }
        if (data.altitude != null) {
            message.altitude = data.altitude;
        }
        if (data.accuracy != null) {
            message.accuracy = data.accuracy;
        }
        if (data.speed != null) {
            message.speed = data.speed;
        }
        if (data.bearing != null) {
            message.bearing = data.bearing;
        }
        return message;
    }
    toObject() {
        const data: {
            latitude?: number;
            longitude?: number;
            altitude?: number;
            accuracy?: number;
            speed?: number;
            bearing?: number;
        } = {};
        if (this.latitude != null) {
            data.latitude = this.latitude;
        }
        if (this.longitude != null) {
            data.longitude = this.longitude;
        }
        if (this.altitude != null) {
            data.altitude = this.altitude;
        }
        if (this.accuracy != null) {
            data.accuracy = this.accuracy;
        }
        if (this.speed != null) {
            data.speed = this.speed;
        }
        if (this.bearing != null) {
            data.bearing = this.bearing;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.latitude != 0)
            writer.writeFloat(1, this.latitude);
        if (this.longitude != 0)
            writer.writeFloat(2, this.longitude);
        if (this.altitude != 0)
            writer.writeFloat(3, this.altitude);
        if (this.accuracy != 0)
            writer.writeFloat(4, this.accuracy);
        if (this.speed != 0)
            writer.writeFloat(5, this.speed);
        if (this.bearing != 0)
            writer.writeFloat(6, this.bearing);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorPositionReading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorPositionReading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.latitude = reader.readFloat();
                    break;
                case 2:
                    message.longitude = reader.readFloat();
                    break;
                case 3:
                    message.altitude = reader.readFloat();
                    break;
                case 4:
                    message.accuracy = reader.readFloat();
                    break;
                case 5:
                    message.speed = reader.readFloat();
                    break;
                case 6:
                    message.bearing = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SensorPositionReading {
        return SensorPositionReading.deserialize(bytes);
    }
}
export class SensorReading extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4, 5]];
    constructor(data?: any[] | ({
        timestamp?: number;
    } & (({
        battery?: SensorBatteryReading;
        distance?: never;
        contact?: never;
        position?: never;
    } | {
        battery?: never;
        distance?: SensorDistanceReading;
        contact?: never;
        position?: never;
    } | {
        battery?: never;
        distance?: never;
        contact?: SensorContactReading;
        position?: never;
    } | {
        battery?: never;
        distance?: never;
        contact?: never;
        position?: SensorPositionReading;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("battery" in data && data.battery != undefined) {
                this.battery = data.battery;
            }
            if ("distance" in data && data.distance != undefined) {
                this.distance = data.distance;
            }
            if ("contact" in data && data.contact != undefined) {
                this.contact = data.contact;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
        }
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get battery() {
        return pb_1.Message.getWrapperField(this, SensorBatteryReading, 2) as SensorBatteryReading;
    }
    set battery(value: SensorBatteryReading) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_battery() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get distance() {
        return pb_1.Message.getWrapperField(this, SensorDistanceReading, 3) as SensorDistanceReading;
    }
    set distance(value: SensorDistanceReading) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_distance() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get contact() {
        return pb_1.Message.getWrapperField(this, SensorContactReading, 4) as SensorContactReading;
    }
    set contact(value: SensorContactReading) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_contact() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get position() {
        return pb_1.Message.getWrapperField(this, SensorPositionReading, 5) as SensorPositionReading;
    }
    set position(value: SensorPositionReading) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_position() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get data() {
        const cases: {
            [index: number]: "none" | "battery" | "distance" | "contact" | "position";
        } = {
            0: "none",
            2: "battery",
            3: "distance",
            4: "contact",
            5: "position"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
    }
    static fromObject(data: {
        timestamp?: number;
        battery?: ReturnType<typeof SensorBatteryReading.prototype.toObject>;
        distance?: ReturnType<typeof SensorDistanceReading.prototype.toObject>;
        contact?: ReturnType<typeof SensorContactReading.prototype.toObject>;
        position?: ReturnType<typeof SensorPositionReading.prototype.toObject>;
    }): SensorReading {
        const message = new SensorReading({});
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.battery != null) {
            message.battery = SensorBatteryReading.fromObject(data.battery);
        }
        if (data.distance != null) {
            message.distance = SensorDistanceReading.fromObject(data.distance);
        }
        if (data.contact != null) {
            message.contact = SensorContactReading.fromObject(data.contact);
        }
        if (data.position != null) {
            message.position = SensorPositionReading.fromObject(data.position);
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: number;
            battery?: ReturnType<typeof SensorBatteryReading.prototype.toObject>;
            distance?: ReturnType<typeof SensorDistanceReading.prototype.toObject>;
            contact?: ReturnType<typeof SensorContactReading.prototype.toObject>;
            position?: ReturnType<typeof SensorPositionReading.prototype.toObject>;
        } = {};
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        if (this.battery != null) {
            data.battery = this.battery.toObject();
        }
        if (this.distance != null) {
            data.distance = this.distance.toObject();
        }
        if (this.contact != null) {
            data.contact = this.contact.toObject();
        }
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.timestamp != 0)
            writer.writeUint64(1, this.timestamp);
        if (this.has_battery)
            writer.writeMessage(2, this.battery, () => this.battery.serialize(writer));
        if (this.has_distance)
            writer.writeMessage(3, this.distance, () => this.distance.serialize(writer));
        if (this.has_contact)
            writer.writeMessage(4, this.contact, () => this.contact.serialize(writer));
        if (this.has_position)
            writer.writeMessage(5, this.position, () => this.position.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorReading {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorReading();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.timestamp = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.battery, () => message.battery = SensorBatteryReading.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.distance, () => message.distance = SensorDistanceReading.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.contact, () => message.contact = SensorContactReading.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.position, () => message.position = SensorPositionReading.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SensorReading {
        return SensorReading.deserialize(bytes);
    }
}
export class CameraFrame extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: CameraFrameType;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, CameraFrameType.CAMERA_FRAME_UNKNOWN) as CameraFrameType;
    }
    set type(value: CameraFrameType) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: CameraFrameType;
        data?: Uint8Array;
    }): CameraFrame {
        const message = new CameraFrame({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: CameraFrameType;
            data?: Uint8Array;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != CameraFrameType.CAMERA_FRAME_UNKNOWN)
            writer.writeEnum(1, this.type);
        if (this.data.length)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraFrame {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraFrame();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CameraFrame {
        return CameraFrame.deserialize(bytes);
    }
}
export class MotorStateMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: MotorType;
        direction?: MotorDirection;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, MotorType.MOTOR_UNKNOWN) as MotorType;
    }
    set type(value: MotorType) {
        pb_1.Message.setField(this, 1, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 2, MotorDirection.MOTOR_DIRECTION_UNKNOWN) as MotorDirection;
    }
    set direction(value: MotorDirection) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: MotorType;
        direction?: MotorDirection;
    }): MotorStateMessage {
        const message = new MotorStateMessage({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: MotorType;
            direction?: MotorDirection;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != MotorType.MOTOR_UNKNOWN)
            writer.writeEnum(1, this.type);
        if (this.direction != MotorDirection.MOTOR_DIRECTION_UNKNOWN)
            writer.writeEnum(2, this.direction);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MotorStateMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MotorStateMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.direction = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MotorStateMessage {
        return MotorStateMessage.deserialize(bytes);
    }
}
export class PingRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): PingRequest {
        const message = new PingRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PingRequest {
        return PingRequest.deserialize(bytes);
    }
}
export class PingResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): PingResponse {
        const message = new PingResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PingResponse {
        return PingResponse.deserialize(bytes);
    }
}
