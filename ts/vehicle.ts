/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: vehicle.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
export namespace vehicle {
    export class Capabalities extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sensors?: dependency_1.SensorType[];
            camera?: boolean;
            microphone?: boolean;
            speaker?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sensors" in data && data.sensors != undefined) {
                    this.sensors = data.sensors;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
                if ("microphone" in data && data.microphone != undefined) {
                    this.microphone = data.microphone;
                }
                if ("speaker" in data && data.speaker != undefined) {
                    this.speaker = data.speaker;
                }
            }
        }
        get sensors() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as dependency_1.SensorType[];
        }
        set sensors(value: dependency_1.SensorType[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set camera(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get microphone() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set microphone(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get speaker() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set speaker(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sensors?: dependency_1.SensorType[];
            camera?: boolean;
            microphone?: boolean;
            speaker?: boolean;
        }): Capabalities {
            const message = new Capabalities({});
            if (data.sensors != null) {
                message.sensors = data.sensors;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            if (data.microphone != null) {
                message.microphone = data.microphone;
            }
            if (data.speaker != null) {
                message.speaker = data.speaker;
            }
            return message;
        }
        toObject() {
            const data: {
                sensors?: dependency_1.SensorType[];
                camera?: boolean;
                microphone?: boolean;
                speaker?: boolean;
            } = {};
            if (this.sensors != null) {
                data.sensors = this.sensors;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            if (this.microphone != null) {
                data.microphone = this.microphone;
            }
            if (this.speaker != null) {
                data.speaker = this.speaker;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sensors.length)
                writer.writePackedEnum(1, this.sensors);
            if (this.camera != false)
                writer.writeBool(2, this.camera);
            if (this.microphone != false)
                writer.writeBool(3, this.microphone);
            if (this.speaker != false)
                writer.writeBool(4, this.speaker);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Capabalities {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Capabalities();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sensors = reader.readPackedEnum();
                        break;
                    case 2:
                        message.camera = reader.readBool();
                        break;
                    case 3:
                        message.microphone = reader.readBool();
                        break;
                    case 4:
                        message.speaker = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Capabalities {
            return Capabalities.deserialize(bytes);
        }
    }
    export class JoinRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            type?: dependency_1.VehicleType;
            name?: string;
            location?: string;
            capabilities?: Capabalities;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("capabilities" in data && data.capabilities != undefined) {
                    this.capabilities = data.capabilities;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.VehicleType.VEHICLE_UNKNOWN) as dependency_1.VehicleType;
        }
        set type(value: dependency_1.VehicleType) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get capabilities() {
            return pb_1.Message.getWrapperField(this, Capabalities, 5) as Capabalities;
        }
        set capabilities(value: Capabalities) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_capabilities() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            token?: string;
            type?: dependency_1.VehicleType;
            name?: string;
            location?: string;
            capabilities?: ReturnType<typeof Capabalities.prototype.toObject>;
        }): JoinRequest {
            const message = new JoinRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.capabilities != null) {
                message.capabilities = Capabalities.fromObject(data.capabilities);
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                type?: dependency_1.VehicleType;
                name?: string;
                location?: string;
                capabilities?: ReturnType<typeof Capabalities.prototype.toObject>;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.capabilities != null) {
                data.capabilities = this.capabilities.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.type != dependency_1.VehicleType.VEHICLE_UNKNOWN)
                writer.writeEnum(2, this.type);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.location.length)
                writer.writeString(4, this.location);
            if (this.has_capabilities)
                writer.writeMessage(5, this.capabilities, () => this.capabilities.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.location = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.capabilities, () => message.capabilities = Capabalities.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinRequest {
            return JoinRequest.deserialize(bytes);
        }
    }
    export class JoinResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            assigned_id?: number;
            assigned_tag?: string;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assigned_id" in data && data.assigned_id != undefined) {
                    this.assigned_id = data.assigned_id;
                }
                if ("assigned_tag" in data && data.assigned_tag != undefined) {
                    this.assigned_tag = data.assigned_tag;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get assigned_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set assigned_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get assigned_tag() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set assigned_tag(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            assigned_id?: number;
            assigned_tag?: string;
            error?: dependency_1.ErrorCode;
        }): JoinResponse {
            const message = new JoinResponse({});
            if (data.assigned_id != null) {
                message.assigned_id = data.assigned_id;
            }
            if (data.assigned_tag != null) {
                message.assigned_tag = data.assigned_tag;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                assigned_id?: number;
                assigned_tag?: string;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.assigned_id != null) {
                data.assigned_id = this.assigned_id;
            }
            if (this.assigned_tag != null) {
                data.assigned_tag = this.assigned_tag;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assigned_id != 0)
                writer.writeUint32(1, this.assigned_id);
            if (this.assigned_tag.length)
                writer.writeString(2, this.assigned_tag);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assigned_id = reader.readUint32();
                        break;
                    case 2:
                        message.assigned_tag = reader.readString();
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinResponse {
            return JoinResponse.deserialize(bytes);
        }
    }
    export class SensorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SensorRequest {
            const message = new SensorRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SensorRequest {
            return SensorRequest.deserialize(bytes);
        }
    }
    export class SensorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
            sensors?: dependency_1.SensorReading[];
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("sensors" in data && data.sensors != undefined) {
                    this.sensors = data.sensors;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sensors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SensorReading, 2) as dependency_1.SensorReading[];
        }
        set sensors(value: dependency_1.SensorReading[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            timestamp?: number;
            sensors?: ReturnType<typeof dependency_1.SensorReading.prototype.toObject>[];
            error?: dependency_1.ErrorCode;
        }): SensorResponse {
            const message = new SensorResponse({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.sensors != null) {
                message.sensors = data.sensors.map(item => dependency_1.SensorReading.fromObject(item));
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                sensors?: ReturnType<typeof dependency_1.SensorReading.prototype.toObject>[];
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.sensors != null) {
                data.sensors = this.sensors.map((item: dependency_1.SensorReading) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeUint64(1, this.timestamp);
            if (this.sensors.length)
                writer.writeRepeatedMessage(2, this.sensors, (item: dependency_1.SensorReading) => item.serialize(writer));
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SensorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SensorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.sensors, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.SensorReading.deserialize(reader), dependency_1.SensorReading));
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SensorResponse {
            return SensorResponse.deserialize(bytes);
        }
    }
    export class AcquireRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            player_id?: string;
        }): AcquireRequest {
            const message = new AcquireRequest({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: string;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id.length)
                writer.writeString(1, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcquireRequest {
            return AcquireRequest.deserialize(bytes);
        }
    }
    export class AcquireResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: string;
            success?: boolean;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            player_id?: string;
            success?: boolean;
            error?: dependency_1.ErrorCode;
        }): AcquireResponse {
            const message = new AcquireResponse({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: string;
                success?: boolean;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id.length)
                writer.writeString(1, this.player_id);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcquireResponse {
            return AcquireResponse.deserialize(bytes);
        }
    }
    export class ReleaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReleaseRequest {
            const message = new ReleaseRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReleaseRequest {
            return ReleaseRequest.deserialize(bytes);
        }
    }
    export class ReleaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player_id?: string;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            player_id?: string;
            error?: dependency_1.ErrorCode;
        }): ReleaseResponse {
            const message = new ReleaseResponse({});
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                player_id?: string;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_id.length)
                writer.writeString(1, this.player_id);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.player_id = reader.readString();
                        break;
                    case 2:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReleaseResponse {
            return ReleaseResponse.deserialize(bytes);
        }
    }
    export class CameraSnapRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CameraSnapRequest {
            const message = new CameraSnapRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSnapRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSnapRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSnapRequest {
            return CameraSnapRequest.deserialize(bytes);
        }
    }
    export class CameraSnapResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
            frame?: dependency_1.CameraFrame;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get frame() {
            return pb_1.Message.getWrapperField(this, dependency_1.CameraFrame, 2) as dependency_1.CameraFrame;
        }
        set frame(value: dependency_1.CameraFrame) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            timestamp?: number;
            frame?: ReturnType<typeof dependency_1.CameraFrame.prototype.toObject>;
            error?: dependency_1.ErrorCode;
        }): CameraSnapResponse {
            const message = new CameraSnapResponse({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.frame != null) {
                message.frame = dependency_1.CameraFrame.fromObject(data.frame);
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                frame?: ReturnType<typeof dependency_1.CameraFrame.prototype.toObject>;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.frame != null) {
                data.frame = this.frame.toObject();
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeUint64(1, this.timestamp);
            if (this.has_frame)
                writer.writeMessage(2, this.frame, () => this.frame.serialize(writer));
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSnapResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSnapResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.frame, () => message.frame = dependency_1.CameraFrame.deserialize(reader));
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSnapResponse {
            return CameraSnapResponse.deserialize(bytes);
        }
    }
    export class CameraStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            enabled?: boolean;
        }): CameraStateRequest {
            const message = new CameraStateRequest({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraStateRequest {
            return CameraStateRequest.deserialize(bytes);
        }
    }
    export class CameraStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            enabled?: boolean;
            error?: dependency_1.ErrorCode;
        }): CameraStateResponse {
            const message = new CameraStateResponse({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    case 2:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraStateResponse {
            return CameraStateResponse.deserialize(bytes);
        }
    }
    export class MotorStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            motors?: dependency_1.MotorStateMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("motors" in data && data.motors != undefined) {
                    this.motors = data.motors;
                }
            }
        }
        get motors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MotorStateMessage, 1) as dependency_1.MotorStateMessage[];
        }
        set motors(value: dependency_1.MotorStateMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
        }): MotorStateRequest {
            const message = new MotorStateRequest({});
            if (data.motors != null) {
                message.motors = data.motors.map(item => dependency_1.MotorStateMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
            } = {};
            if (this.motors != null) {
                data.motors = this.motors.map((item: dependency_1.MotorStateMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.motors.length)
                writer.writeRepeatedMessage(1, this.motors, (item: dependency_1.MotorStateMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MotorStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MotorStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.motors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.MotorStateMessage.deserialize(reader), dependency_1.MotorStateMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MotorStateRequest {
            return MotorStateRequest.deserialize(bytes);
        }
    }
    export class MotorStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            motors?: dependency_1.MotorStateMessage[];
            error?: dependency_1.ErrorCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("motors" in data && data.motors != undefined) {
                    this.motors = data.motors;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get motors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MotorStateMessage, 1) as dependency_1.MotorStateMessage[];
        }
        set motors(value: dependency_1.MotorStateMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.ErrorCode.ERROR_OK) as dependency_1.ErrorCode;
        }
        set error(value: dependency_1.ErrorCode) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
            error?: dependency_1.ErrorCode;
        }): MotorStateResponse {
            const message = new MotorStateResponse({});
            if (data.motors != null) {
                message.motors = data.motors.map(item => dependency_1.MotorStateMessage.fromObject(item));
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                motors?: ReturnType<typeof dependency_1.MotorStateMessage.prototype.toObject>[];
                error?: dependency_1.ErrorCode;
            } = {};
            if (this.motors != null) {
                data.motors = this.motors.map((item: dependency_1.MotorStateMessage) => item.toObject());
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.motors.length)
                writer.writeRepeatedMessage(1, this.motors, (item: dependency_1.MotorStateMessage) => item.serialize(writer));
            if (this.error != dependency_1.ErrorCode.ERROR_OK)
                writer.writeEnum(2, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MotorStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MotorStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.motors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.MotorStateMessage.deserialize(reader), dependency_1.MotorStateMessage));
                        break;
                    case 2:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MotorStateResponse {
            return MotorStateResponse.deserialize(bytes);
        }
    }
    export class Envelope extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]];
        constructor(data?: any[] | ({} & (({
            join_request?: JoinRequest;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: JoinResponse;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: SensorRequest;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: SensorResponse;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: AcquireRequest;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: AcquireResponse;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: ReleaseRequest;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: ReleaseResponse;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: CameraSnapRequest;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: CameraSnapResponse;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: CameraStateRequest;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: CameraStateResponse;
            motor_state_request?: never;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: MotorStateRequest;
            motor_state_response?: never;
        } | {
            join_request?: never;
            join_response?: never;
            sensor_request?: never;
            sensor_response?: never;
            acquire_request?: never;
            acquire_response?: never;
            release_request?: never;
            release_response?: never;
            camera_snap_request?: never;
            camera_snap_response?: never;
            camera_state_request?: never;
            camera_state_response?: never;
            motor_state_request?: never;
            motor_state_response?: MotorStateResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("join_request" in data && data.join_request != undefined) {
                    this.join_request = data.join_request;
                }
                if ("join_response" in data && data.join_response != undefined) {
                    this.join_response = data.join_response;
                }
                if ("sensor_request" in data && data.sensor_request != undefined) {
                    this.sensor_request = data.sensor_request;
                }
                if ("sensor_response" in data && data.sensor_response != undefined) {
                    this.sensor_response = data.sensor_response;
                }
                if ("acquire_request" in data && data.acquire_request != undefined) {
                    this.acquire_request = data.acquire_request;
                }
                if ("acquire_response" in data && data.acquire_response != undefined) {
                    this.acquire_response = data.acquire_response;
                }
                if ("release_request" in data && data.release_request != undefined) {
                    this.release_request = data.release_request;
                }
                if ("release_response" in data && data.release_response != undefined) {
                    this.release_response = data.release_response;
                }
                if ("camera_snap_request" in data && data.camera_snap_request != undefined) {
                    this.camera_snap_request = data.camera_snap_request;
                }
                if ("camera_snap_response" in data && data.camera_snap_response != undefined) {
                    this.camera_snap_response = data.camera_snap_response;
                }
                if ("camera_state_request" in data && data.camera_state_request != undefined) {
                    this.camera_state_request = data.camera_state_request;
                }
                if ("camera_state_response" in data && data.camera_state_response != undefined) {
                    this.camera_state_response = data.camera_state_response;
                }
                if ("motor_state_request" in data && data.motor_state_request != undefined) {
                    this.motor_state_request = data.motor_state_request;
                }
                if ("motor_state_response" in data && data.motor_state_response != undefined) {
                    this.motor_state_response = data.motor_state_response;
                }
            }
        }
        get join_request() {
            return pb_1.Message.getWrapperField(this, JoinRequest, 1) as JoinRequest;
        }
        set join_request(value: JoinRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_join_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get join_response() {
            return pb_1.Message.getWrapperField(this, JoinResponse, 2) as JoinResponse;
        }
        set join_response(value: JoinResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_join_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sensor_request() {
            return pb_1.Message.getWrapperField(this, SensorRequest, 3) as SensorRequest;
        }
        set sensor_request(value: SensorRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_sensor_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get sensor_response() {
            return pb_1.Message.getWrapperField(this, SensorResponse, 4) as SensorResponse;
        }
        set sensor_response(value: SensorResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_sensor_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get acquire_request() {
            return pb_1.Message.getWrapperField(this, AcquireRequest, 5) as AcquireRequest;
        }
        set acquire_request(value: AcquireRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_acquire_request() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get acquire_response() {
            return pb_1.Message.getWrapperField(this, AcquireResponse, 6) as AcquireResponse;
        }
        set acquire_response(value: AcquireResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_acquire_response() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get release_request() {
            return pb_1.Message.getWrapperField(this, ReleaseRequest, 7) as ReleaseRequest;
        }
        set release_request(value: ReleaseRequest) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_release_request() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get release_response() {
            return pb_1.Message.getWrapperField(this, ReleaseResponse, 8) as ReleaseResponse;
        }
        set release_response(value: ReleaseResponse) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_release_response() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get camera_snap_request() {
            return pb_1.Message.getWrapperField(this, CameraSnapRequest, 9) as CameraSnapRequest;
        }
        set camera_snap_request(value: CameraSnapRequest) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_camera_snap_request() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get camera_snap_response() {
            return pb_1.Message.getWrapperField(this, CameraSnapResponse, 10) as CameraSnapResponse;
        }
        set camera_snap_response(value: CameraSnapResponse) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_camera_snap_response() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get camera_state_request() {
            return pb_1.Message.getWrapperField(this, CameraStateRequest, 11) as CameraStateRequest;
        }
        set camera_state_request(value: CameraStateRequest) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_camera_state_request() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get camera_state_response() {
            return pb_1.Message.getWrapperField(this, CameraStateResponse, 12) as CameraStateResponse;
        }
        set camera_state_response(value: CameraStateResponse) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_camera_state_response() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get motor_state_request() {
            return pb_1.Message.getWrapperField(this, MotorStateRequest, 13) as MotorStateRequest;
        }
        set motor_state_request(value: MotorStateRequest) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_motor_state_request() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get motor_state_response() {
            return pb_1.Message.getWrapperField(this, MotorStateResponse, 14) as MotorStateResponse;
        }
        set motor_state_response(value: MotorStateResponse) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_motor_state_response() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "join_request" | "join_response" | "sensor_request" | "sensor_response" | "acquire_request" | "acquire_response" | "release_request" | "release_response" | "camera_snap_request" | "camera_snap_response" | "camera_state_request" | "camera_state_response" | "motor_state_request" | "motor_state_response";
            } = {
                0: "none",
                1: "join_request",
                2: "join_response",
                3: "sensor_request",
                4: "sensor_response",
                5: "acquire_request",
                6: "acquire_response",
                7: "release_request",
                8: "release_response",
                9: "camera_snap_request",
                10: "camera_snap_response",
                11: "camera_state_request",
                12: "camera_state_response",
                13: "motor_state_request",
                14: "motor_state_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])];
        }
        static fromObject(data: {
            join_request?: ReturnType<typeof JoinRequest.prototype.toObject>;
            join_response?: ReturnType<typeof JoinResponse.prototype.toObject>;
            sensor_request?: ReturnType<typeof SensorRequest.prototype.toObject>;
            sensor_response?: ReturnType<typeof SensorResponse.prototype.toObject>;
            acquire_request?: ReturnType<typeof AcquireRequest.prototype.toObject>;
            acquire_response?: ReturnType<typeof AcquireResponse.prototype.toObject>;
            release_request?: ReturnType<typeof ReleaseRequest.prototype.toObject>;
            release_response?: ReturnType<typeof ReleaseResponse.prototype.toObject>;
            camera_snap_request?: ReturnType<typeof CameraSnapRequest.prototype.toObject>;
            camera_snap_response?: ReturnType<typeof CameraSnapResponse.prototype.toObject>;
            camera_state_request?: ReturnType<typeof CameraStateRequest.prototype.toObject>;
            camera_state_response?: ReturnType<typeof CameraStateResponse.prototype.toObject>;
            motor_state_request?: ReturnType<typeof MotorStateRequest.prototype.toObject>;
            motor_state_response?: ReturnType<typeof MotorStateResponse.prototype.toObject>;
        }): Envelope {
            const message = new Envelope({});
            if (data.join_request != null) {
                message.join_request = JoinRequest.fromObject(data.join_request);
            }
            if (data.join_response != null) {
                message.join_response = JoinResponse.fromObject(data.join_response);
            }
            if (data.sensor_request != null) {
                message.sensor_request = SensorRequest.fromObject(data.sensor_request);
            }
            if (data.sensor_response != null) {
                message.sensor_response = SensorResponse.fromObject(data.sensor_response);
            }
            if (data.acquire_request != null) {
                message.acquire_request = AcquireRequest.fromObject(data.acquire_request);
            }
            if (data.acquire_response != null) {
                message.acquire_response = AcquireResponse.fromObject(data.acquire_response);
            }
            if (data.release_request != null) {
                message.release_request = ReleaseRequest.fromObject(data.release_request);
            }
            if (data.release_response != null) {
                message.release_response = ReleaseResponse.fromObject(data.release_response);
            }
            if (data.camera_snap_request != null) {
                message.camera_snap_request = CameraSnapRequest.fromObject(data.camera_snap_request);
            }
            if (data.camera_snap_response != null) {
                message.camera_snap_response = CameraSnapResponse.fromObject(data.camera_snap_response);
            }
            if (data.camera_state_request != null) {
                message.camera_state_request = CameraStateRequest.fromObject(data.camera_state_request);
            }
            if (data.camera_state_response != null) {
                message.camera_state_response = CameraStateResponse.fromObject(data.camera_state_response);
            }
            if (data.motor_state_request != null) {
                message.motor_state_request = MotorStateRequest.fromObject(data.motor_state_request);
            }
            if (data.motor_state_response != null) {
                message.motor_state_response = MotorStateResponse.fromObject(data.motor_state_response);
            }
            return message;
        }
        toObject() {
            const data: {
                join_request?: ReturnType<typeof JoinRequest.prototype.toObject>;
                join_response?: ReturnType<typeof JoinResponse.prototype.toObject>;
                sensor_request?: ReturnType<typeof SensorRequest.prototype.toObject>;
                sensor_response?: ReturnType<typeof SensorResponse.prototype.toObject>;
                acquire_request?: ReturnType<typeof AcquireRequest.prototype.toObject>;
                acquire_response?: ReturnType<typeof AcquireResponse.prototype.toObject>;
                release_request?: ReturnType<typeof ReleaseRequest.prototype.toObject>;
                release_response?: ReturnType<typeof ReleaseResponse.prototype.toObject>;
                camera_snap_request?: ReturnType<typeof CameraSnapRequest.prototype.toObject>;
                camera_snap_response?: ReturnType<typeof CameraSnapResponse.prototype.toObject>;
                camera_state_request?: ReturnType<typeof CameraStateRequest.prototype.toObject>;
                camera_state_response?: ReturnType<typeof CameraStateResponse.prototype.toObject>;
                motor_state_request?: ReturnType<typeof MotorStateRequest.prototype.toObject>;
                motor_state_response?: ReturnType<typeof MotorStateResponse.prototype.toObject>;
            } = {};
            if (this.join_request != null) {
                data.join_request = this.join_request.toObject();
            }
            if (this.join_response != null) {
                data.join_response = this.join_response.toObject();
            }
            if (this.sensor_request != null) {
                data.sensor_request = this.sensor_request.toObject();
            }
            if (this.sensor_response != null) {
                data.sensor_response = this.sensor_response.toObject();
            }
            if (this.acquire_request != null) {
                data.acquire_request = this.acquire_request.toObject();
            }
            if (this.acquire_response != null) {
                data.acquire_response = this.acquire_response.toObject();
            }
            if (this.release_request != null) {
                data.release_request = this.release_request.toObject();
            }
            if (this.release_response != null) {
                data.release_response = this.release_response.toObject();
            }
            if (this.camera_snap_request != null) {
                data.camera_snap_request = this.camera_snap_request.toObject();
            }
            if (this.camera_snap_response != null) {
                data.camera_snap_response = this.camera_snap_response.toObject();
            }
            if (this.camera_state_request != null) {
                data.camera_state_request = this.camera_state_request.toObject();
            }
            if (this.camera_state_response != null) {
                data.camera_state_response = this.camera_state_response.toObject();
            }
            if (this.motor_state_request != null) {
                data.motor_state_request = this.motor_state_request.toObject();
            }
            if (this.motor_state_response != null) {
                data.motor_state_response = this.motor_state_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_join_request)
                writer.writeMessage(1, this.join_request, () => this.join_request.serialize(writer));
            if (this.has_join_response)
                writer.writeMessage(2, this.join_response, () => this.join_response.serialize(writer));
            if (this.has_sensor_request)
                writer.writeMessage(3, this.sensor_request, () => this.sensor_request.serialize(writer));
            if (this.has_sensor_response)
                writer.writeMessage(4, this.sensor_response, () => this.sensor_response.serialize(writer));
            if (this.has_acquire_request)
                writer.writeMessage(5, this.acquire_request, () => this.acquire_request.serialize(writer));
            if (this.has_acquire_response)
                writer.writeMessage(6, this.acquire_response, () => this.acquire_response.serialize(writer));
            if (this.has_release_request)
                writer.writeMessage(7, this.release_request, () => this.release_request.serialize(writer));
            if (this.has_release_response)
                writer.writeMessage(8, this.release_response, () => this.release_response.serialize(writer));
            if (this.has_camera_snap_request)
                writer.writeMessage(9, this.camera_snap_request, () => this.camera_snap_request.serialize(writer));
            if (this.has_camera_snap_response)
                writer.writeMessage(10, this.camera_snap_response, () => this.camera_snap_response.serialize(writer));
            if (this.has_camera_state_request)
                writer.writeMessage(11, this.camera_state_request, () => this.camera_state_request.serialize(writer));
            if (this.has_camera_state_response)
                writer.writeMessage(12, this.camera_state_response, () => this.camera_state_response.serialize(writer));
            if (this.has_motor_state_request)
                writer.writeMessage(13, this.motor_state_request, () => this.motor_state_request.serialize(writer));
            if (this.has_motor_state_response)
                writer.writeMessage(14, this.motor_state_response, () => this.motor_state_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Envelope {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Envelope();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.join_request, () => message.join_request = JoinRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.join_response, () => message.join_response = JoinResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.sensor_request, () => message.sensor_request = SensorRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.sensor_response, () => message.sensor_response = SensorResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.acquire_request, () => message.acquire_request = AcquireRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.acquire_response, () => message.acquire_response = AcquireResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.release_request, () => message.release_request = ReleaseRequest.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.release_response, () => message.release_response = ReleaseResponse.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.camera_snap_request, () => message.camera_snap_request = CameraSnapRequest.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.camera_snap_response, () => message.camera_snap_response = CameraSnapResponse.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.camera_state_request, () => message.camera_state_request = CameraStateRequest.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.camera_state_response, () => message.camera_state_response = CameraStateResponse.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.motor_state_request, () => message.motor_state_request = MotorStateRequest.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.motor_state_response, () => message.motor_state_response = MotorStateResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Envelope {
            return Envelope.deserialize(bytes);
        }
    }
}
